// Code generated by mockery v2.43.2. DO NOT EDIT.

package telnet

import mock "github.com/stretchr/testify/mock"

// MockEventSink is an autogenerated mock type for the EventSink type
type MockEventSink struct {
	mock.Mock
}

type MockEventSink_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventSink) EXPECT() *MockEventSink_Expecter {
	return &MockEventSink_Expecter{mock: &_m.Mock}
}

// SendEvent provides a mock function with given fields: event, data
func (_m *MockEventSink) SendEvent(event string, data interface{}) {
	_m.Called(event, data)
}

// MockEventSink_SendEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEvent'
type MockEventSink_SendEvent_Call struct {
	*mock.Call
}

// SendEvent is a helper method to define mock.On call
//   - event string
//   - data interface{}
func (_e *MockEventSink_Expecter) SendEvent(event interface{}, data interface{}) *MockEventSink_SendEvent_Call {
	return &MockEventSink_SendEvent_Call{Call: _e.mock.On("SendEvent", event, data)}
}

func (_c *MockEventSink_SendEvent_Call) Run(run func(event string, data interface{})) *MockEventSink_SendEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockEventSink_SendEvent_Call) Return() *MockEventSink_SendEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventSink_SendEvent_Call) RunAndReturn(run func(string, interface{})) *MockEventSink_SendEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventSink creates a new instance of MockEventSink. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventSink(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventSink {
	mock := &MockEventSink{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
