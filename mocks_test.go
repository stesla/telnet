// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package telnet

import (
	"net"
	"time"

	mock "github.com/stretchr/testify/mock"
	"golang.org/x/text/encoding"
)

// NewMockConn creates a new instance of MockConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConn {
	mock := &MockConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConn is an autogenerated mock type for the Conn type
type MockConn struct {
	mock.Mock
}

type MockConn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConn) EXPECT() *MockConn_Expecter {
	return &MockConn_Expecter{mock: &_m.Mock}
}

// AddListener provides a mock function for the type MockConn
func (_mock *MockConn) AddListener(s string, eventListener EventListener) {
	_mock.Called(s, eventListener)
	return
}

// MockConn_AddListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddListener'
type MockConn_AddListener_Call struct {
	*mock.Call
}

// AddListener is a helper method to define mock.On call
//   - s
//   - eventListener
func (_e *MockConn_Expecter) AddListener(s interface{}, eventListener interface{}) *MockConn_AddListener_Call {
	return &MockConn_AddListener_Call{Call: _e.mock.On("AddListener", s, eventListener)}
}

func (_c *MockConn_AddListener_Call) Run(run func(s string, eventListener EventListener)) *MockConn_AddListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(EventListener))
	})
	return _c
}

func (_c *MockConn_AddListener_Call) Return() *MockConn_AddListener_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_AddListener_Call) RunAndReturn(run func(s string, eventListener EventListener)) *MockConn_AddListener_Call {
	_c.Run(run)
	return _c
}

// BindOption provides a mock function for the type MockConn
func (_mock *MockConn) BindOption(o Option) {
	_mock.Called(o)
	return
}

// MockConn_BindOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindOption'
type MockConn_BindOption_Call struct {
	*mock.Call
}

// BindOption is a helper method to define mock.On call
//   - o
func (_e *MockConn_Expecter) BindOption(o interface{}) *MockConn_BindOption_Call {
	return &MockConn_BindOption_Call{Call: _e.mock.On("BindOption", o)}
}

func (_c *MockConn_BindOption_Call) Run(run func(o Option)) *MockConn_BindOption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Option))
	})
	return _c
}

func (_c *MockConn_BindOption_Call) Return() *MockConn_BindOption_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_BindOption_Call) RunAndReturn(run func(o Option)) *MockConn_BindOption_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function for the type MockConn
func (_mock *MockConn) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConn_Expecter) Close() *MockConn_Close_Call {
	return &MockConn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConn_Close_Call) Run(run func()) *MockConn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConn_Close_Call) Return(err error) *MockConn_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConn_Close_Call) RunAndReturn(run func() error) *MockConn_Close_Call {
	_c.Call.Return(run)
	return _c
}

// EnableOptionForThem provides a mock function for the type MockConn
func (_mock *MockConn) EnableOptionForThem(option byte, enable bool) error {
	ret := _mock.Called(option, enable)

	if len(ret) == 0 {
		panic("no return value specified for EnableOptionForThem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(byte, bool) error); ok {
		r0 = returnFunc(option, enable)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConn_EnableOptionForThem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableOptionForThem'
type MockConn_EnableOptionForThem_Call struct {
	*mock.Call
}

// EnableOptionForThem is a helper method to define mock.On call
//   - option
//   - enable
func (_e *MockConn_Expecter) EnableOptionForThem(option interface{}, enable interface{}) *MockConn_EnableOptionForThem_Call {
	return &MockConn_EnableOptionForThem_Call{Call: _e.mock.On("EnableOptionForThem", option, enable)}
}

func (_c *MockConn_EnableOptionForThem_Call) Run(run func(option byte, enable bool)) *MockConn_EnableOptionForThem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte), args[1].(bool))
	})
	return _c
}

func (_c *MockConn_EnableOptionForThem_Call) Return(err error) *MockConn_EnableOptionForThem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConn_EnableOptionForThem_Call) RunAndReturn(run func(option byte, enable bool) error) *MockConn_EnableOptionForThem_Call {
	_c.Call.Return(run)
	return _c
}

// EnableOptionForUs provides a mock function for the type MockConn
func (_mock *MockConn) EnableOptionForUs(option byte, enable bool) error {
	ret := _mock.Called(option, enable)

	if len(ret) == 0 {
		panic("no return value specified for EnableOptionForUs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(byte, bool) error); ok {
		r0 = returnFunc(option, enable)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConn_EnableOptionForUs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableOptionForUs'
type MockConn_EnableOptionForUs_Call struct {
	*mock.Call
}

// EnableOptionForUs is a helper method to define mock.On call
//   - option
//   - enable
func (_e *MockConn_Expecter) EnableOptionForUs(option interface{}, enable interface{}) *MockConn_EnableOptionForUs_Call {
	return &MockConn_EnableOptionForUs_Call{Call: _e.mock.On("EnableOptionForUs", option, enable)}
}

func (_c *MockConn_EnableOptionForUs_Call) Run(run func(option byte, enable bool)) *MockConn_EnableOptionForUs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte), args[1].(bool))
	})
	return _c
}

func (_c *MockConn_EnableOptionForUs_Call) Return(err error) *MockConn_EnableOptionForUs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConn_EnableOptionForUs_Call) RunAndReturn(run func(option byte, enable bool) error) *MockConn_EnableOptionForUs_Call {
	_c.Call.Return(run)
	return _c
}

// LocalAddr provides a mock function for the type MockConn
func (_mock *MockConn) LocalAddr() net.Addr {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalAddr")
	}

	var r0 net.Addr
	if returnFunc, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}
	return r0
}

// MockConn_LocalAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalAddr'
type MockConn_LocalAddr_Call struct {
	*mock.Call
}

// LocalAddr is a helper method to define mock.On call
func (_e *MockConn_Expecter) LocalAddr() *MockConn_LocalAddr_Call {
	return &MockConn_LocalAddr_Call{Call: _e.mock.On("LocalAddr")}
}

func (_c *MockConn_LocalAddr_Call) Run(run func()) *MockConn_LocalAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConn_LocalAddr_Call) Return(addr net.Addr) *MockConn_LocalAddr_Call {
	_c.Call.Return(addr)
	return _c
}

func (_c *MockConn_LocalAddr_Call) RunAndReturn(run func() net.Addr) *MockConn_LocalAddr_Call {
	_c.Call.Return(run)
	return _c
}

// Logf provides a mock function for the type MockConn
func (_mock *MockConn) Logf(fmt string, v ...any) {
	if len(v) > 0 {
		_mock.Called(fmt, v)
	} else {
		_mock.Called(fmt)
	}

	return
}

// MockConn_Logf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logf'
type MockConn_Logf_Call struct {
	*mock.Call
}

// Logf is a helper method to define mock.On call
//   - fmt
//   - v
func (_e *MockConn_Expecter) Logf(fmt interface{}, v ...interface{}) *MockConn_Logf_Call {
	return &MockConn_Logf_Call{Call: _e.mock.On("Logf",
		append([]interface{}{fmt}, v...)...)}
}

func (_c *MockConn_Logf_Call) Run(run func(fmt string, v ...any)) *MockConn_Logf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]any)
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockConn_Logf_Call) Return() *MockConn_Logf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_Logf_Call) RunAndReturn(run func(fmt string, v ...any)) *MockConn_Logf_Call {
	_c.Run(run)
	return _c
}

// Option provides a mock function for the type MockConn
func (_mock *MockConn) Option(option byte) Option {
	ret := _mock.Called(option)

	if len(ret) == 0 {
		panic("no return value specified for Option")
	}

	var r0 Option
	if returnFunc, ok := ret.Get(0).(func(byte) Option); ok {
		r0 = returnFunc(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Option)
		}
	}
	return r0
}

// MockConn_Option_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Option'
type MockConn_Option_Call struct {
	*mock.Call
}

// Option is a helper method to define mock.On call
//   - option
func (_e *MockConn_Expecter) Option(option interface{}) *MockConn_Option_Call {
	return &MockConn_Option_Call{Call: _e.mock.On("Option", option)}
}

func (_c *MockConn_Option_Call) Run(run func(option byte)) *MockConn_Option_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte))
	})
	return _c
}

func (_c *MockConn_Option_Call) Return(option1 Option) *MockConn_Option_Call {
	_c.Call.Return(option1)
	return _c
}

func (_c *MockConn_Option_Call) RunAndReturn(run func(option byte) Option) *MockConn_Option_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type MockConn
func (_mock *MockConn) Read(b []byte) (int, error) {
	ret := _mock.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(b)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(b)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(b)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConn_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockConn_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - b
func (_e *MockConn_Expecter) Read(b interface{}) *MockConn_Read_Call {
	return &MockConn_Read_Call{Call: _e.mock.On("Read", b)}
}

func (_c *MockConn_Read_Call) Run(run func(b []byte)) *MockConn_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockConn_Read_Call) Return(n int, err error) *MockConn_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockConn_Read_Call) RunAndReturn(run func(b []byte) (int, error)) *MockConn_Read_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteAddr provides a mock function for the type MockConn
func (_mock *MockConn) RemoteAddr() net.Addr {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoteAddr")
	}

	var r0 net.Addr
	if returnFunc, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}
	return r0
}

// MockConn_RemoteAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteAddr'
type MockConn_RemoteAddr_Call struct {
	*mock.Call
}

// RemoteAddr is a helper method to define mock.On call
func (_e *MockConn_Expecter) RemoteAddr() *MockConn_RemoteAddr_Call {
	return &MockConn_RemoteAddr_Call{Call: _e.mock.On("RemoteAddr")}
}

func (_c *MockConn_RemoteAddr_Call) Run(run func()) *MockConn_RemoteAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConn_RemoteAddr_Call) Return(addr net.Addr) *MockConn_RemoteAddr_Call {
	_c.Call.Return(addr)
	return _c
}

func (_c *MockConn_RemoteAddr_Call) RunAndReturn(run func() net.Addr) *MockConn_RemoteAddr_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveListener provides a mock function for the type MockConn
func (_mock *MockConn) RemoveListener(s string, eventListener EventListener) {
	_mock.Called(s, eventListener)
	return
}

// MockConn_RemoveListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveListener'
type MockConn_RemoveListener_Call struct {
	*mock.Call
}

// RemoveListener is a helper method to define mock.On call
//   - s
//   - eventListener
func (_e *MockConn_Expecter) RemoveListener(s interface{}, eventListener interface{}) *MockConn_RemoveListener_Call {
	return &MockConn_RemoveListener_Call{Call: _e.mock.On("RemoveListener", s, eventListener)}
}

func (_c *MockConn_RemoveListener_Call) Run(run func(s string, eventListener EventListener)) *MockConn_RemoveListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(EventListener))
	})
	return _c
}

func (_c *MockConn_RemoveListener_Call) Return() *MockConn_RemoveListener_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_RemoveListener_Call) RunAndReturn(run func(s string, eventListener EventListener)) *MockConn_RemoveListener_Call {
	_c.Run(run)
	return _c
}

// RequestEncoding provides a mock function for the type MockConn
func (_mock *MockConn) RequestEncoding(encoding1 encoding.Encoding) error {
	ret := _mock.Called(encoding1)

	if len(ret) == 0 {
		panic("no return value specified for RequestEncoding")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(encoding.Encoding) error); ok {
		r0 = returnFunc(encoding1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConn_RequestEncoding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestEncoding'
type MockConn_RequestEncoding_Call struct {
	*mock.Call
}

// RequestEncoding is a helper method to define mock.On call
//   - encoding1
func (_e *MockConn_Expecter) RequestEncoding(encoding1 interface{}) *MockConn_RequestEncoding_Call {
	return &MockConn_RequestEncoding_Call{Call: _e.mock.On("RequestEncoding", encoding1)}
}

func (_c *MockConn_RequestEncoding_Call) Run(run func(encoding1 encoding.Encoding)) *MockConn_RequestEncoding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(encoding.Encoding))
	})
	return _c
}

func (_c *MockConn_RequestEncoding_Call) Return(err error) *MockConn_RequestEncoding_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConn_RequestEncoding_Call) RunAndReturn(run func(encoding1 encoding.Encoding) error) *MockConn_RequestEncoding_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type MockConn
func (_mock *MockConn) Send(p []byte) (int, error) {
	ret := _mock.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(p)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(p)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConn_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockConn_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - p
func (_e *MockConn_Expecter) Send(p interface{}) *MockConn_Send_Call {
	return &MockConn_Send_Call{Call: _e.mock.On("Send", p)}
}

func (_c *MockConn_Send_Call) Run(run func(p []byte)) *MockConn_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockConn_Send_Call) Return(n int, err error) *MockConn_Send_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockConn_Send_Call) RunAndReturn(run func(p []byte) (int, error)) *MockConn_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SetDeadline provides a mock function for the type MockConn
func (_mock *MockConn) SetDeadline(t time.Time) error {
	ret := _mock.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetDeadline")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = returnFunc(t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConn_SetDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDeadline'
type MockConn_SetDeadline_Call struct {
	*mock.Call
}

// SetDeadline is a helper method to define mock.On call
//   - t
func (_e *MockConn_Expecter) SetDeadline(t interface{}) *MockConn_SetDeadline_Call {
	return &MockConn_SetDeadline_Call{Call: _e.mock.On("SetDeadline", t)}
}

func (_c *MockConn_SetDeadline_Call) Run(run func(t time.Time)) *MockConn_SetDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockConn_SetDeadline_Call) Return(err error) *MockConn_SetDeadline_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConn_SetDeadline_Call) RunAndReturn(run func(t time.Time) error) *MockConn_SetDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetEncoding provides a mock function for the type MockConn
func (_mock *MockConn) SetEncoding(encoding1 encoding.Encoding) {
	_mock.Called(encoding1)
	return
}

// MockConn_SetEncoding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEncoding'
type MockConn_SetEncoding_Call struct {
	*mock.Call
}

// SetEncoding is a helper method to define mock.On call
//   - encoding1
func (_e *MockConn_Expecter) SetEncoding(encoding1 interface{}) *MockConn_SetEncoding_Call {
	return &MockConn_SetEncoding_Call{Call: _e.mock.On("SetEncoding", encoding1)}
}

func (_c *MockConn_SetEncoding_Call) Run(run func(encoding1 encoding.Encoding)) *MockConn_SetEncoding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(encoding.Encoding))
	})
	return _c
}

func (_c *MockConn_SetEncoding_Call) Return() *MockConn_SetEncoding_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_SetEncoding_Call) RunAndReturn(run func(encoding1 encoding.Encoding)) *MockConn_SetEncoding_Call {
	_c.Run(run)
	return _c
}

// SetLogger provides a mock function for the type MockConn
func (_mock *MockConn) SetLogger(logger Logger) {
	_mock.Called(logger)
	return
}

// MockConn_SetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogger'
type MockConn_SetLogger_Call struct {
	*mock.Call
}

// SetLogger is a helper method to define mock.On call
//   - logger
func (_e *MockConn_Expecter) SetLogger(logger interface{}) *MockConn_SetLogger_Call {
	return &MockConn_SetLogger_Call{Call: _e.mock.On("SetLogger", logger)}
}

func (_c *MockConn_SetLogger_Call) Run(run func(logger Logger)) *MockConn_SetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Logger))
	})
	return _c
}

func (_c *MockConn_SetLogger_Call) Return() *MockConn_SetLogger_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_SetLogger_Call) RunAndReturn(run func(logger Logger)) *MockConn_SetLogger_Call {
	_c.Run(run)
	return _c
}

// SetReadDeadline provides a mock function for the type MockConn
func (_mock *MockConn) SetReadDeadline(t time.Time) error {
	ret := _mock.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetReadDeadline")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = returnFunc(t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConn_SetReadDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReadDeadline'
type MockConn_SetReadDeadline_Call struct {
	*mock.Call
}

// SetReadDeadline is a helper method to define mock.On call
//   - t
func (_e *MockConn_Expecter) SetReadDeadline(t interface{}) *MockConn_SetReadDeadline_Call {
	return &MockConn_SetReadDeadline_Call{Call: _e.mock.On("SetReadDeadline", t)}
}

func (_c *MockConn_SetReadDeadline_Call) Run(run func(t time.Time)) *MockConn_SetReadDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockConn_SetReadDeadline_Call) Return(err error) *MockConn_SetReadDeadline_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConn_SetReadDeadline_Call) RunAndReturn(run func(t time.Time) error) *MockConn_SetReadDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetReadEncoding provides a mock function for the type MockConn
func (_mock *MockConn) SetReadEncoding(encoding1 encoding.Encoding) {
	_mock.Called(encoding1)
	return
}

// MockConn_SetReadEncoding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReadEncoding'
type MockConn_SetReadEncoding_Call struct {
	*mock.Call
}

// SetReadEncoding is a helper method to define mock.On call
//   - encoding1
func (_e *MockConn_Expecter) SetReadEncoding(encoding1 interface{}) *MockConn_SetReadEncoding_Call {
	return &MockConn_SetReadEncoding_Call{Call: _e.mock.On("SetReadEncoding", encoding1)}
}

func (_c *MockConn_SetReadEncoding_Call) Run(run func(encoding1 encoding.Encoding)) *MockConn_SetReadEncoding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(encoding.Encoding))
	})
	return _c
}

func (_c *MockConn_SetReadEncoding_Call) Return() *MockConn_SetReadEncoding_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_SetReadEncoding_Call) RunAndReturn(run func(encoding1 encoding.Encoding)) *MockConn_SetReadEncoding_Call {
	_c.Run(run)
	return _c
}

// SetWriteDeadline provides a mock function for the type MockConn
func (_mock *MockConn) SetWriteDeadline(t time.Time) error {
	ret := _mock.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetWriteDeadline")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = returnFunc(t)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConn_SetWriteDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWriteDeadline'
type MockConn_SetWriteDeadline_Call struct {
	*mock.Call
}

// SetWriteDeadline is a helper method to define mock.On call
//   - t
func (_e *MockConn_Expecter) SetWriteDeadline(t interface{}) *MockConn_SetWriteDeadline_Call {
	return &MockConn_SetWriteDeadline_Call{Call: _e.mock.On("SetWriteDeadline", t)}
}

func (_c *MockConn_SetWriteDeadline_Call) Run(run func(t time.Time)) *MockConn_SetWriteDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockConn_SetWriteDeadline_Call) Return(err error) *MockConn_SetWriteDeadline_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConn_SetWriteDeadline_Call) RunAndReturn(run func(t time.Time) error) *MockConn_SetWriteDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetWriteEncoding provides a mock function for the type MockConn
func (_mock *MockConn) SetWriteEncoding(encoding1 encoding.Encoding) {
	_mock.Called(encoding1)
	return
}

// MockConn_SetWriteEncoding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWriteEncoding'
type MockConn_SetWriteEncoding_Call struct {
	*mock.Call
}

// SetWriteEncoding is a helper method to define mock.On call
//   - encoding1
func (_e *MockConn_Expecter) SetWriteEncoding(encoding1 interface{}) *MockConn_SetWriteEncoding_Call {
	return &MockConn_SetWriteEncoding_Call{Call: _e.mock.On("SetWriteEncoding", encoding1)}
}

func (_c *MockConn_SetWriteEncoding_Call) Run(run func(encoding1 encoding.Encoding)) *MockConn_SetWriteEncoding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(encoding.Encoding))
	})
	return _c
}

func (_c *MockConn_SetWriteEncoding_Call) Return() *MockConn_SetWriteEncoding_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_SetWriteEncoding_Call) RunAndReturn(run func(encoding1 encoding.Encoding)) *MockConn_SetWriteEncoding_Call {
	_c.Run(run)
	return _c
}

// SuppressGoAhead provides a mock function for the type MockConn
func (_mock *MockConn) SuppressGoAhead(enabled bool) {
	_mock.Called(enabled)
	return
}

// MockConn_SuppressGoAhead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuppressGoAhead'
type MockConn_SuppressGoAhead_Call struct {
	*mock.Call
}

// SuppressGoAhead is a helper method to define mock.On call
//   - enabled
func (_e *MockConn_Expecter) SuppressGoAhead(enabled interface{}) *MockConn_SuppressGoAhead_Call {
	return &MockConn_SuppressGoAhead_Call{Call: _e.mock.On("SuppressGoAhead", enabled)}
}

func (_c *MockConn_SuppressGoAhead_Call) Run(run func(enabled bool)) *MockConn_SuppressGoAhead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockConn_SuppressGoAhead_Call) Return() *MockConn_SuppressGoAhead_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_SuppressGoAhead_Call) RunAndReturn(run func(enabled bool)) *MockConn_SuppressGoAhead_Call {
	_c.Run(run)
	return _c
}

// Write provides a mock function for the type MockConn
func (_mock *MockConn) Write(b []byte) (int, error) {
	ret := _mock.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return returnFunc(b)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = returnFunc(b)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(b)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConn_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockConn_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - b
func (_e *MockConn_Expecter) Write(b interface{}) *MockConn_Write_Call {
	return &MockConn_Write_Call{Call: _e.mock.On("Write", b)}
}

func (_c *MockConn_Write_Call) Run(run func(b []byte)) *MockConn_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockConn_Write_Call) Return(n int, err error) *MockConn_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockConn_Write_Call) RunAndReturn(run func(b []byte) (int, error)) *MockConn_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Logf provides a mock function for the type MockLogger
func (_mock *MockLogger) Logf(fmt string, v ...any) {
	if len(v) > 0 {
		_mock.Called(fmt, v)
	} else {
		_mock.Called(fmt)
	}

	return
}

// MockLogger_Logf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logf'
type MockLogger_Logf_Call struct {
	*mock.Call
}

// Logf is a helper method to define mock.On call
//   - fmt
//   - v
func (_e *MockLogger_Expecter) Logf(fmt interface{}, v ...interface{}) *MockLogger_Logf_Call {
	return &MockLogger_Logf_Call{Call: _e.mock.On("Logf",
		append([]interface{}{fmt}, v...)...)}
}

func (_c *MockLogger_Logf_Call) Run(run func(fmt string, v ...any)) *MockLogger_Logf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]any)
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockLogger_Logf_Call) Return() *MockLogger_Logf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Logf_Call) RunAndReturn(run func(fmt string, v ...any)) *MockLogger_Logf_Call {
	_c.Run(run)
	return _c
}

// NewMockEventListener creates a new instance of MockEventListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventListener {
	mock := &MockEventListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventListener is an autogenerated mock type for the EventListener type
type MockEventListener struct {
	mock.Mock
}

type MockEventListener_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventListener) EXPECT() *MockEventListener_Expecter {
	return &MockEventListener_Expecter{mock: &_m.Mock}
}

// HandleEvent provides a mock function for the type MockEventListener
func (_mock *MockEventListener) HandleEvent(v any) {
	_mock.Called(v)
	return
}

// MockEventListener_HandleEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleEvent'
type MockEventListener_HandleEvent_Call struct {
	*mock.Call
}

// HandleEvent is a helper method to define mock.On call
//   - v
func (_e *MockEventListener_Expecter) HandleEvent(v interface{}) *MockEventListener_HandleEvent_Call {
	return &MockEventListener_HandleEvent_Call{Call: _e.mock.On("HandleEvent", v)}
}

func (_c *MockEventListener_HandleEvent_Call) Run(run func(v any)) *MockEventListener_HandleEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *MockEventListener_HandleEvent_Call) Return() *MockEventListener_HandleEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventListener_HandleEvent_Call) RunAndReturn(run func(v any)) *MockEventListener_HandleEvent_Call {
	_c.Run(run)
	return _c
}

// NewMockEventSink creates a new instance of MockEventSink. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventSink(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventSink {
	mock := &MockEventSink{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventSink is an autogenerated mock type for the EventSink type
type MockEventSink struct {
	mock.Mock
}

type MockEventSink_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventSink) EXPECT() *MockEventSink_Expecter {
	return &MockEventSink_Expecter{mock: &_m.Mock}
}

// SendEvent provides a mock function for the type MockEventSink
func (_mock *MockEventSink) SendEvent(event string, data any) {
	_mock.Called(event, data)
	return
}

// MockEventSink_SendEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEvent'
type MockEventSink_SendEvent_Call struct {
	*mock.Call
}

// SendEvent is a helper method to define mock.On call
//   - event
//   - data
func (_e *MockEventSink_Expecter) SendEvent(event interface{}, data interface{}) *MockEventSink_SendEvent_Call {
	return &MockEventSink_SendEvent_Call{Call: _e.mock.On("SendEvent", event, data)}
}

func (_c *MockEventSink_SendEvent_Call) Run(run func(event string, data any)) *MockEventSink_SendEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(any))
	})
	return _c
}

func (_c *MockEventSink_SendEvent_Call) Return() *MockEventSink_SendEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventSink_SendEvent_Call) RunAndReturn(run func(event string, data any)) *MockEventSink_SendEvent_Call {
	_c.Run(run)
	return _c
}

// NewMockOption creates a new instance of MockOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOption {
	mock := &MockOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOption is an autogenerated mock type for the Option type
type MockOption struct {
	mock.Mock
}

type MockOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOption) EXPECT() *MockOption_Expecter {
	return &MockOption_Expecter{mock: &_m.Mock}
}

// Allow provides a mock function for the type MockOption
func (_mock *MockOption) Allow(them bool, us bool) {
	_mock.Called(them, us)
	return
}

// MockOption_Allow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allow'
type MockOption_Allow_Call struct {
	*mock.Call
}

// Allow is a helper method to define mock.On call
//   - them
//   - us
func (_e *MockOption_Expecter) Allow(them interface{}, us interface{}) *MockOption_Allow_Call {
	return &MockOption_Allow_Call{Call: _e.mock.On("Allow", them, us)}
}

func (_c *MockOption_Allow_Call) Run(run func(them bool, us bool)) *MockOption_Allow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(bool))
	})
	return _c
}

func (_c *MockOption_Allow_Call) Return() *MockOption_Allow_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOption_Allow_Call) RunAndReturn(run func(them bool, us bool)) *MockOption_Allow_Call {
	_c.Run(run)
	return _c
}

// Bind provides a mock function for the type MockOption
func (_mock *MockOption) Bind(conn Conn, eventSink EventSink) {
	_mock.Called(conn, eventSink)
	return
}

// MockOption_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type MockOption_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - conn
//   - eventSink
func (_e *MockOption_Expecter) Bind(conn interface{}, eventSink interface{}) *MockOption_Bind_Call {
	return &MockOption_Bind_Call{Call: _e.mock.On("Bind", conn, eventSink)}
}

func (_c *MockOption_Bind_Call) Run(run func(conn Conn, eventSink EventSink)) *MockOption_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Conn), args[1].(EventSink))
	})
	return _c
}

func (_c *MockOption_Bind_Call) Return() *MockOption_Bind_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOption_Bind_Call) RunAndReturn(run func(conn Conn, eventSink EventSink)) *MockOption_Bind_Call {
	_c.Run(run)
	return _c
}

// Byte provides a mock function for the type MockOption
func (_mock *MockOption) Byte() byte {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Byte")
	}

	var r0 byte
	if returnFunc, ok := ret.Get(0).(func() byte); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(byte)
	}
	return r0
}

// MockOption_Byte_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Byte'
type MockOption_Byte_Call struct {
	*mock.Call
}

// Byte is a helper method to define mock.On call
func (_e *MockOption_Expecter) Byte() *MockOption_Byte_Call {
	return &MockOption_Byte_Call{Call: _e.mock.On("Byte")}
}

func (_c *MockOption_Byte_Call) Run(run func()) *MockOption_Byte_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_Byte_Call) Return(v byte) *MockOption_Byte_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockOption_Byte_Call) RunAndReturn(run func() byte) *MockOption_Byte_Call {
	_c.Call.Return(run)
	return _c
}

// Conn provides a mock function for the type MockOption
func (_mock *MockOption) Conn() Conn {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conn")
	}

	var r0 Conn
	if returnFunc, ok := ret.Get(0).(func() Conn); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Conn)
		}
	}
	return r0
}

// MockOption_Conn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Conn'
type MockOption_Conn_Call struct {
	*mock.Call
}

// Conn is a helper method to define mock.On call
func (_e *MockOption_Expecter) Conn() *MockOption_Conn_Call {
	return &MockOption_Conn_Call{Call: _e.mock.On("Conn")}
}

func (_c *MockOption_Conn_Call) Run(run func()) *MockOption_Conn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_Conn_Call) Return(conn Conn) *MockOption_Conn_Call {
	_c.Call.Return(conn)
	return _c
}

func (_c *MockOption_Conn_Call) RunAndReturn(run func() Conn) *MockOption_Conn_Call {
	_c.Call.Return(run)
	return _c
}

// EnabledForThem provides a mock function for the type MockOption
func (_mock *MockOption) EnabledForThem() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnabledForThem")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockOption_EnabledForThem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnabledForThem'
type MockOption_EnabledForThem_Call struct {
	*mock.Call
}

// EnabledForThem is a helper method to define mock.On call
func (_e *MockOption_Expecter) EnabledForThem() *MockOption_EnabledForThem_Call {
	return &MockOption_EnabledForThem_Call{Call: _e.mock.On("EnabledForThem")}
}

func (_c *MockOption_EnabledForThem_Call) Run(run func()) *MockOption_EnabledForThem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_EnabledForThem_Call) Return(b bool) *MockOption_EnabledForThem_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockOption_EnabledForThem_Call) RunAndReturn(run func() bool) *MockOption_EnabledForThem_Call {
	_c.Call.Return(run)
	return _c
}

// EnabledForUs provides a mock function for the type MockOption
func (_mock *MockOption) EnabledForUs() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnabledForUs")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockOption_EnabledForUs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnabledForUs'
type MockOption_EnabledForUs_Call struct {
	*mock.Call
}

// EnabledForUs is a helper method to define mock.On call
func (_e *MockOption_Expecter) EnabledForUs() *MockOption_EnabledForUs_Call {
	return &MockOption_EnabledForUs_Call{Call: _e.mock.On("EnabledForUs")}
}

func (_c *MockOption_EnabledForUs_Call) Run(run func()) *MockOption_EnabledForUs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_EnabledForUs_Call) Return(b bool) *MockOption_EnabledForUs_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockOption_EnabledForUs_Call) RunAndReturn(run func() bool) *MockOption_EnabledForUs_Call {
	_c.Call.Return(run)
	return _c
}

// Sink provides a mock function for the type MockOption
func (_mock *MockOption) Sink() EventSink {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sink")
	}

	var r0 EventSink
	if returnFunc, ok := ret.Get(0).(func() EventSink); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EventSink)
		}
	}
	return r0
}

// MockOption_Sink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sink'
type MockOption_Sink_Call struct {
	*mock.Call
}

// Sink is a helper method to define mock.On call
func (_e *MockOption_Expecter) Sink() *MockOption_Sink_Call {
	return &MockOption_Sink_Call{Call: _e.mock.On("Sink")}
}

func (_c *MockOption_Sink_Call) Run(run func()) *MockOption_Sink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_Sink_Call) Return(eventSink EventSink) *MockOption_Sink_Call {
	_c.Call.Return(eventSink)
	return _c
}

func (_c *MockOption_Sink_Call) RunAndReturn(run func() EventSink) *MockOption_Sink_Call {
	_c.Call.Return(run)
	return _c
}

// Subnegotiation provides a mock function for the type MockOption
func (_mock *MockOption) Subnegotiation(bytes []byte) {
	_mock.Called(bytes)
	return
}

// MockOption_Subnegotiation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subnegotiation'
type MockOption_Subnegotiation_Call struct {
	*mock.Call
}

// Subnegotiation is a helper method to define mock.On call
//   - bytes
func (_e *MockOption_Expecter) Subnegotiation(bytes interface{}) *MockOption_Subnegotiation_Call {
	return &MockOption_Subnegotiation_Call{Call: _e.mock.On("Subnegotiation", bytes)}
}

func (_c *MockOption_Subnegotiation_Call) Run(run func(bytes []byte)) *MockOption_Subnegotiation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockOption_Subnegotiation_Call) Return() *MockOption_Subnegotiation_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOption_Subnegotiation_Call) RunAndReturn(run func(bytes []byte)) *MockOption_Subnegotiation_Call {
	_c.Run(run)
	return _c
}

// disableThem provides a mock function for the type MockOption
func (_mock *MockOption) disableThem() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for disableThem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOption_disableThem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'disableThem'
type MockOption_disableThem_Call struct {
	*mock.Call
}

// disableThem is a helper method to define mock.On call
func (_e *MockOption_Expecter) disableThem() *MockOption_disableThem_Call {
	return &MockOption_disableThem_Call{Call: _e.mock.On("disableThem")}
}

func (_c *MockOption_disableThem_Call) Run(run func()) *MockOption_disableThem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_disableThem_Call) Return(err error) *MockOption_disableThem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOption_disableThem_Call) RunAndReturn(run func() error) *MockOption_disableThem_Call {
	_c.Call.Return(run)
	return _c
}

// disableUs provides a mock function for the type MockOption
func (_mock *MockOption) disableUs() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for disableUs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOption_disableUs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'disableUs'
type MockOption_disableUs_Call struct {
	*mock.Call
}

// disableUs is a helper method to define mock.On call
func (_e *MockOption_Expecter) disableUs() *MockOption_disableUs_Call {
	return &MockOption_disableUs_Call{Call: _e.mock.On("disableUs")}
}

func (_c *MockOption_disableUs_Call) Run(run func()) *MockOption_disableUs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_disableUs_Call) Return(err error) *MockOption_disableUs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOption_disableUs_Call) RunAndReturn(run func() error) *MockOption_disableUs_Call {
	_c.Call.Return(run)
	return _c
}

// enableThem provides a mock function for the type MockOption
func (_mock *MockOption) enableThem() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for enableThem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOption_enableThem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'enableThem'
type MockOption_enableThem_Call struct {
	*mock.Call
}

// enableThem is a helper method to define mock.On call
func (_e *MockOption_Expecter) enableThem() *MockOption_enableThem_Call {
	return &MockOption_enableThem_Call{Call: _e.mock.On("enableThem")}
}

func (_c *MockOption_enableThem_Call) Run(run func()) *MockOption_enableThem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_enableThem_Call) Return(err error) *MockOption_enableThem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOption_enableThem_Call) RunAndReturn(run func() error) *MockOption_enableThem_Call {
	_c.Call.Return(run)
	return _c
}

// enableUs provides a mock function for the type MockOption
func (_mock *MockOption) enableUs() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for enableUs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOption_enableUs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'enableUs'
type MockOption_enableUs_Call struct {
	*mock.Call
}

// enableUs is a helper method to define mock.On call
func (_e *MockOption_Expecter) enableUs() *MockOption_enableUs_Call {
	return &MockOption_enableUs_Call{Call: _e.mock.On("enableUs")}
}

func (_c *MockOption_enableUs_Call) Run(run func()) *MockOption_enableUs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_enableUs_Call) Return(err error) *MockOption_enableUs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOption_enableUs_Call) RunAndReturn(run func() error) *MockOption_enableUs_Call {
	_c.Call.Return(run)
	return _c
}

// receive provides a mock function for the type MockOption
func (_mock *MockOption) receive(c byte) error {
	ret := _mock.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for receive")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(byte) error); ok {
		r0 = returnFunc(c)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockOption_receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'receive'
type MockOption_receive_Call struct {
	*mock.Call
}

// receive is a helper method to define mock.On call
//   - c
func (_e *MockOption_Expecter) receive(c interface{}) *MockOption_receive_Call {
	return &MockOption_receive_Call{Call: _e.mock.On("receive", c)}
}

func (_c *MockOption_receive_Call) Run(run func(c byte)) *MockOption_receive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte))
	})
	return _c
}

func (_c *MockOption_receive_Call) Return(err error) *MockOption_receive_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockOption_receive_Call) RunAndReturn(run func(c byte) error) *MockOption_receive_Call {
	_c.Call.Return(run)
	return _c
}
