// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stesla/telnet (interfaces: OptionHandler)

// Package telnet is a generated GoMock package.
package telnet

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOptionHandler is a mock of OptionHandler interface.
type MockOptionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOptionHandlerMockRecorder
}

// MockOptionHandlerMockRecorder is the mock recorder for MockOptionHandler.
type MockOptionHandlerMockRecorder struct {
	mock *MockOptionHandler
}

// NewMockOptionHandler creates a new mock instance.
func NewMockOptionHandler(ctrl *gomock.Controller) *MockOptionHandler {
	mock := &MockOptionHandler{ctrl: ctrl}
	mock.recorder = &MockOptionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptionHandler) EXPECT() *MockOptionHandlerMockRecorder {
	return m.recorder
}

// Disable mocks base method.
func (m *MockOptionHandler) Disable(arg0 Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disable", arg0)
}

// Disable indicates an expected call of Disable.
func (mr *MockOptionHandlerMockRecorder) Disable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockOptionHandler)(nil).Disable), arg0)
}

// Enable mocks base method.
func (m *MockOptionHandler) Enable(arg0 Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Enable", arg0)
}

// Enable indicates an expected call of Enable.
func (mr *MockOptionHandlerMockRecorder) Enable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockOptionHandler)(nil).Enable), arg0)
}

// Option mocks base method.
func (m *MockOptionHandler) Option() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Option")
	ret0, _ := ret[0].(byte)
	return ret0
}

// Option indicates an expected call of Option.
func (mr *MockOptionHandlerMockRecorder) Option() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Option", reflect.TypeOf((*MockOptionHandler)(nil).Option))
}
