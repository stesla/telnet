// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stesla/telnet (interfaces: Conn,Option,Log,Logger)

// Package telnet is a generated GoMock package.
package telnet

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	encoding "golang.org/x/text/encoding"
)

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// BindOption mocks base method.
func (m *MockConn) BindOption(arg0 Option) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BindOption", arg0)
}

// BindOption indicates an expected call of BindOption.
func (mr *MockConnMockRecorder) BindOption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindOption", reflect.TypeOf((*MockConn)(nil).BindOption), arg0)
}

// EnableOptionForThem mocks base method.
func (m *MockConn) EnableOptionForThem(arg0 byte, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableOptionForThem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableOptionForThem indicates an expected call of EnableOptionForThem.
func (mr *MockConnMockRecorder) EnableOptionForThem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableOptionForThem", reflect.TypeOf((*MockConn)(nil).EnableOptionForThem), arg0, arg1)
}

// EnableOptionForUs mocks base method.
func (m *MockConn) EnableOptionForUs(arg0 byte, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableOptionForUs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableOptionForUs indicates an expected call of EnableOptionForUs.
func (mr *MockConnMockRecorder) EnableOptionForUs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableOptionForUs", reflect.TypeOf((*MockConn)(nil).EnableOptionForUs), arg0, arg1)
}

// Logf mocks base method.
func (m *MockConn) Logf(arg0 LogLevel, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Logf", varargs...)
}

// Logf indicates an expected call of Logf.
func (mr *MockConnMockRecorder) Logf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logf", reflect.TypeOf((*MockConn)(nil).Logf), varargs...)
}

// OptionEnabled mocks base method.
func (m *MockConn) OptionEnabled(arg0 byte) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OptionEnabled", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// OptionEnabled indicates an expected call of OptionEnabled.
func (mr *MockConnMockRecorder) OptionEnabled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OptionEnabled", reflect.TypeOf((*MockConn)(nil).OptionEnabled), arg0)
}

// Read mocks base method.
func (m *MockConn) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockConnMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConn)(nil).Read), arg0)
}

// Send mocks base method.
func (m *MockConn) Send(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockConnMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConn)(nil).Send), arg0)
}

// SetEncoding mocks base method.
func (m *MockConn) SetEncoding(arg0 encoding.Encoding) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEncoding", arg0)
}

// SetEncoding indicates an expected call of SetEncoding.
func (mr *MockConnMockRecorder) SetEncoding(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEncoding", reflect.TypeOf((*MockConn)(nil).SetEncoding), arg0)
}

// SetLevel mocks base method.
func (m *MockConn) SetLevel(arg0 LogLevel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLevel", arg0)
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockConnMockRecorder) SetLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockConn)(nil).SetLevel), arg0)
}

// SetLogger mocks base method.
func (m *MockConn) SetLogger(arg0 Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockConnMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockConn)(nil).SetLogger), arg0)
}

// SetReadEncoding mocks base method.
func (m *MockConn) SetReadEncoding(arg0 encoding.Encoding) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReadEncoding", arg0)
}

// SetReadEncoding indicates an expected call of SetReadEncoding.
func (mr *MockConnMockRecorder) SetReadEncoding(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadEncoding", reflect.TypeOf((*MockConn)(nil).SetReadEncoding), arg0)
}

// SetWriteEncoding mocks base method.
func (m *MockConn) SetWriteEncoding(arg0 encoding.Encoding) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWriteEncoding", arg0)
}

// SetWriteEncoding indicates an expected call of SetWriteEncoding.
func (mr *MockConnMockRecorder) SetWriteEncoding(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteEncoding", reflect.TypeOf((*MockConn)(nil).SetWriteEncoding), arg0)
}

// SuppressGoAhead mocks base method.
func (m *MockConn) SuppressGoAhead(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SuppressGoAhead", arg0)
}

// SuppressGoAhead indicates an expected call of SuppressGoAhead.
func (mr *MockConnMockRecorder) SuppressGoAhead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuppressGoAhead", reflect.TypeOf((*MockConn)(nil).SuppressGoAhead), arg0)
}

// Write mocks base method.
func (m *MockConn) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockConnMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockConn)(nil).Write), arg0)
}

// MockOption is a mock of Option interface.
type MockOption struct {
	ctrl     *gomock.Controller
	recorder *MockOptionMockRecorder
}

// MockOptionMockRecorder is the mock recorder for MockOption.
type MockOptionMockRecorder struct {
	mock *MockOption
}

// NewMockOption creates a new mock instance.
func NewMockOption(ctrl *gomock.Controller) *MockOption {
	mock := &MockOption{ctrl: ctrl}
	mock.recorder = &MockOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOption) EXPECT() *MockOptionMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockOption) Allow(arg0, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Allow", arg0, arg1)
}

// Allow indicates an expected call of Allow.
func (mr *MockOptionMockRecorder) Allow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockOption)(nil).Allow), arg0, arg1)
}

// Bind mocks base method.
func (m *MockOption) Bind(arg0 Conn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Bind", arg0)
}

// Bind indicates an expected call of Bind.
func (mr *MockOptionMockRecorder) Bind(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockOption)(nil).Bind), arg0)
}

// Byte mocks base method.
func (m *MockOption) Byte() byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Byte")
	ret0, _ := ret[0].(byte)
	return ret0
}

// Byte indicates an expected call of Byte.
func (mr *MockOptionMockRecorder) Byte() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Byte", reflect.TypeOf((*MockOption)(nil).Byte))
}

// Conn mocks base method.
func (m *MockOption) Conn() Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn")
	ret0, _ := ret[0].(Conn)
	return ret0
}

// Conn indicates an expected call of Conn.
func (mr *MockOptionMockRecorder) Conn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockOption)(nil).Conn))
}

// EnabledForThem mocks base method.
func (m *MockOption) EnabledForThem() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnabledForThem")
	ret0, _ := ret[0].(bool)
	return ret0
}

// EnabledForThem indicates an expected call of EnabledForThem.
func (mr *MockOptionMockRecorder) EnabledForThem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnabledForThem", reflect.TypeOf((*MockOption)(nil).EnabledForThem))
}

// EnabledForUs mocks base method.
func (m *MockOption) EnabledForUs() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnabledForUs")
	ret0, _ := ret[0].(bool)
	return ret0
}

// EnabledForUs indicates an expected call of EnabledForUs.
func (mr *MockOptionMockRecorder) EnabledForUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnabledForUs", reflect.TypeOf((*MockOption)(nil).EnabledForUs))
}

// Subnegotiation mocks base method.
func (m *MockOption) Subnegotiation(arg0 []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subnegotiation", arg0)
}

// Subnegotiation indicates an expected call of Subnegotiation.
func (mr *MockOptionMockRecorder) Subnegotiation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subnegotiation", reflect.TypeOf((*MockOption)(nil).Subnegotiation), arg0)
}

// Update mocks base method.
func (m *MockOption) Update(arg0 byte, arg1, arg2, arg3, arg4 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4)
}

// Update indicates an expected call of Update.
func (mr *MockOptionMockRecorder) Update(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOption)(nil).Update), arg0, arg1, arg2, arg3, arg4)
}

// disableThem mocks base method.
func (m *MockOption) disableThem() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "disableThem")
	ret0, _ := ret[0].(error)
	return ret0
}

// disableThem indicates an expected call of disableThem.
func (mr *MockOptionMockRecorder) disableThem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "disableThem", reflect.TypeOf((*MockOption)(nil).disableThem))
}

// disableUs mocks base method.
func (m *MockOption) disableUs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "disableUs")
	ret0, _ := ret[0].(error)
	return ret0
}

// disableUs indicates an expected call of disableUs.
func (mr *MockOptionMockRecorder) disableUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "disableUs", reflect.TypeOf((*MockOption)(nil).disableUs))
}

// enableThem mocks base method.
func (m *MockOption) enableThem() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "enableThem")
	ret0, _ := ret[0].(error)
	return ret0
}

// enableThem indicates an expected call of enableThem.
func (mr *MockOptionMockRecorder) enableThem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "enableThem", reflect.TypeOf((*MockOption)(nil).enableThem))
}

// enableUs mocks base method.
func (m *MockOption) enableUs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "enableUs")
	ret0, _ := ret[0].(error)
	return ret0
}

// enableUs indicates an expected call of enableUs.
func (mr *MockOptionMockRecorder) enableUs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "enableUs", reflect.TypeOf((*MockOption)(nil).enableUs))
}

// receive mocks base method.
func (m *MockOption) receive(arg0 byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "receive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// receive indicates an expected call of receive.
func (mr *MockOptionMockRecorder) receive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "receive", reflect.TypeOf((*MockOption)(nil).receive), arg0)
}

// MockLog is a mock of Log interface.
type MockLog struct {
	ctrl     *gomock.Controller
	recorder *MockLogMockRecorder
}

// MockLogMockRecorder is the mock recorder for MockLog.
type MockLogMockRecorder struct {
	mock *MockLog
}

// NewMockLog creates a new mock instance.
func NewMockLog(ctrl *gomock.Controller) *MockLog {
	mock := &MockLog{ctrl: ctrl}
	mock.recorder = &MockLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLog) EXPECT() *MockLogMockRecorder {
	return m.recorder
}

// Printf mocks base method.
func (m *MockLog) Printf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockLogMockRecorder) Printf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockLog)(nil).Printf), varargs...)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Logf mocks base method.
func (m *MockLogger) Logf(arg0 LogLevel, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Logf", varargs...)
}

// Logf indicates an expected call of Logf.
func (mr *MockLoggerMockRecorder) Logf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logf", reflect.TypeOf((*MockLogger)(nil).Logf), varargs...)
}

// SetLevel mocks base method.
func (m *MockLogger) SetLevel(arg0 LogLevel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLevel", arg0)
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockLoggerMockRecorder) SetLevel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockLogger)(nil).SetLevel), arg0)
}
