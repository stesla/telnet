// Code generated by mockery v2.43.2. DO NOT EDIT.

package telnet

import (
	mock "github.com/stretchr/testify/mock"
	encoding "golang.org/x/text/encoding"

	net "net"

	time "time"
)

// MockConn is an autogenerated mock type for the Conn type
type MockConn struct {
	mock.Mock
}

type MockConn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConn) EXPECT() *MockConn_Expecter {
	return &MockConn_Expecter{mock: &_m.Mock}
}

// AddListener provides a mock function with given fields: _a0, _a1
func (_m *MockConn) AddListener(_a0 string, _a1 EventListener) {
	_m.Called(_a0, _a1)
}

// MockConn_AddListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddListener'
type MockConn_AddListener_Call struct {
	*mock.Call
}

// AddListener is a helper method to define mock.On call
//   - _a0 string
//   - _a1 EventListener
func (_e *MockConn_Expecter) AddListener(_a0 interface{}, _a1 interface{}) *MockConn_AddListener_Call {
	return &MockConn_AddListener_Call{Call: _e.mock.On("AddListener", _a0, _a1)}
}

func (_c *MockConn_AddListener_Call) Run(run func(_a0 string, _a1 EventListener)) *MockConn_AddListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(EventListener))
	})
	return _c
}

func (_c *MockConn_AddListener_Call) Return() *MockConn_AddListener_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_AddListener_Call) RunAndReturn(run func(string, EventListener)) *MockConn_AddListener_Call {
	_c.Call.Return(run)
	return _c
}

// BindOption provides a mock function with given fields: o
func (_m *MockConn) BindOption(o Option) {
	_m.Called(o)
}

// MockConn_BindOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BindOption'
type MockConn_BindOption_Call struct {
	*mock.Call
}

// BindOption is a helper method to define mock.On call
//   - o Option
func (_e *MockConn_Expecter) BindOption(o interface{}) *MockConn_BindOption_Call {
	return &MockConn_BindOption_Call{Call: _e.mock.On("BindOption", o)}
}

func (_c *MockConn_BindOption_Call) Run(run func(o Option)) *MockConn_BindOption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Option))
	})
	return _c
}

func (_c *MockConn_BindOption_Call) Return() *MockConn_BindOption_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_BindOption_Call) RunAndReturn(run func(Option)) *MockConn_BindOption_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockConn) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConn_Expecter) Close() *MockConn_Close_Call {
	return &MockConn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConn_Close_Call) Run(run func()) *MockConn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConn_Close_Call) Return(_a0 error) *MockConn_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConn_Close_Call) RunAndReturn(run func() error) *MockConn_Close_Call {
	_c.Call.Return(run)
	return _c
}

// EnableOptionForThem provides a mock function with given fields: option, enable
func (_m *MockConn) EnableOptionForThem(option byte, enable bool) error {
	ret := _m.Called(option, enable)

	if len(ret) == 0 {
		panic("no return value specified for EnableOptionForThem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(byte, bool) error); ok {
		r0 = rf(option, enable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConn_EnableOptionForThem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableOptionForThem'
type MockConn_EnableOptionForThem_Call struct {
	*mock.Call
}

// EnableOptionForThem is a helper method to define mock.On call
//   - option byte
//   - enable bool
func (_e *MockConn_Expecter) EnableOptionForThem(option interface{}, enable interface{}) *MockConn_EnableOptionForThem_Call {
	return &MockConn_EnableOptionForThem_Call{Call: _e.mock.On("EnableOptionForThem", option, enable)}
}

func (_c *MockConn_EnableOptionForThem_Call) Run(run func(option byte, enable bool)) *MockConn_EnableOptionForThem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte), args[1].(bool))
	})
	return _c
}

func (_c *MockConn_EnableOptionForThem_Call) Return(_a0 error) *MockConn_EnableOptionForThem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConn_EnableOptionForThem_Call) RunAndReturn(run func(byte, bool) error) *MockConn_EnableOptionForThem_Call {
	_c.Call.Return(run)
	return _c
}

// EnableOptionForUs provides a mock function with given fields: option, enable
func (_m *MockConn) EnableOptionForUs(option byte, enable bool) error {
	ret := _m.Called(option, enable)

	if len(ret) == 0 {
		panic("no return value specified for EnableOptionForUs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(byte, bool) error); ok {
		r0 = rf(option, enable)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConn_EnableOptionForUs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnableOptionForUs'
type MockConn_EnableOptionForUs_Call struct {
	*mock.Call
}

// EnableOptionForUs is a helper method to define mock.On call
//   - option byte
//   - enable bool
func (_e *MockConn_Expecter) EnableOptionForUs(option interface{}, enable interface{}) *MockConn_EnableOptionForUs_Call {
	return &MockConn_EnableOptionForUs_Call{Call: _e.mock.On("EnableOptionForUs", option, enable)}
}

func (_c *MockConn_EnableOptionForUs_Call) Run(run func(option byte, enable bool)) *MockConn_EnableOptionForUs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte), args[1].(bool))
	})
	return _c
}

func (_c *MockConn_EnableOptionForUs_Call) Return(_a0 error) *MockConn_EnableOptionForUs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConn_EnableOptionForUs_Call) RunAndReturn(run func(byte, bool) error) *MockConn_EnableOptionForUs_Call {
	_c.Call.Return(run)
	return _c
}

// LocalAddr provides a mock function with given fields:
func (_m *MockConn) LocalAddr() net.Addr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LocalAddr")
	}

	var r0 net.Addr
	if rf, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	return r0
}

// MockConn_LocalAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LocalAddr'
type MockConn_LocalAddr_Call struct {
	*mock.Call
}

// LocalAddr is a helper method to define mock.On call
func (_e *MockConn_Expecter) LocalAddr() *MockConn_LocalAddr_Call {
	return &MockConn_LocalAddr_Call{Call: _e.mock.On("LocalAddr")}
}

func (_c *MockConn_LocalAddr_Call) Run(run func()) *MockConn_LocalAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConn_LocalAddr_Call) Return(_a0 net.Addr) *MockConn_LocalAddr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConn_LocalAddr_Call) RunAndReturn(run func() net.Addr) *MockConn_LocalAddr_Call {
	_c.Call.Return(run)
	return _c
}

// Logf provides a mock function with given fields: fmt, v
func (_m *MockConn) Logf(fmt string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, fmt)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// MockConn_Logf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logf'
type MockConn_Logf_Call struct {
	*mock.Call
}

// Logf is a helper method to define mock.On call
//   - fmt string
//   - v ...interface{}
func (_e *MockConn_Expecter) Logf(fmt interface{}, v ...interface{}) *MockConn_Logf_Call {
	return &MockConn_Logf_Call{Call: _e.mock.On("Logf",
		append([]interface{}{fmt}, v...)...)}
}

func (_c *MockConn_Logf_Call) Run(run func(fmt string, v ...interface{})) *MockConn_Logf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockConn_Logf_Call) Return() *MockConn_Logf_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_Logf_Call) RunAndReturn(run func(string, ...interface{})) *MockConn_Logf_Call {
	_c.Call.Return(run)
	return _c
}

// Option provides a mock function with given fields: option
func (_m *MockConn) Option(option byte) Option {
	ret := _m.Called(option)

	if len(ret) == 0 {
		panic("no return value specified for Option")
	}

	var r0 Option
	if rf, ok := ret.Get(0).(func(byte) Option); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Option)
		}
	}

	return r0
}

// MockConn_Option_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Option'
type MockConn_Option_Call struct {
	*mock.Call
}

// Option is a helper method to define mock.On call
//   - option byte
func (_e *MockConn_Expecter) Option(option interface{}) *MockConn_Option_Call {
	return &MockConn_Option_Call{Call: _e.mock.On("Option", option)}
}

func (_c *MockConn_Option_Call) Run(run func(option byte)) *MockConn_Option_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte))
	})
	return _c
}

func (_c *MockConn_Option_Call) Return(_a0 Option) *MockConn_Option_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConn_Option_Call) RunAndReturn(run func(byte) Option) *MockConn_Option_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: b
func (_m *MockConn) Read(b []byte) (int, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConn_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockConn_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - b []byte
func (_e *MockConn_Expecter) Read(b interface{}) *MockConn_Read_Call {
	return &MockConn_Read_Call{Call: _e.mock.On("Read", b)}
}

func (_c *MockConn_Read_Call) Run(run func(b []byte)) *MockConn_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockConn_Read_Call) Return(n int, err error) *MockConn_Read_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockConn_Read_Call) RunAndReturn(run func([]byte) (int, error)) *MockConn_Read_Call {
	_c.Call.Return(run)
	return _c
}

// RemoteAddr provides a mock function with given fields:
func (_m *MockConn) RemoteAddr() net.Addr {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RemoteAddr")
	}

	var r0 net.Addr
	if rf, ok := ret.Get(0).(func() net.Addr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Addr)
		}
	}

	return r0
}

// MockConn_RemoteAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoteAddr'
type MockConn_RemoteAddr_Call struct {
	*mock.Call
}

// RemoteAddr is a helper method to define mock.On call
func (_e *MockConn_Expecter) RemoteAddr() *MockConn_RemoteAddr_Call {
	return &MockConn_RemoteAddr_Call{Call: _e.mock.On("RemoteAddr")}
}

func (_c *MockConn_RemoteAddr_Call) Run(run func()) *MockConn_RemoteAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConn_RemoteAddr_Call) Return(_a0 net.Addr) *MockConn_RemoteAddr_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConn_RemoteAddr_Call) RunAndReturn(run func() net.Addr) *MockConn_RemoteAddr_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveListener provides a mock function with given fields: _a0, _a1
func (_m *MockConn) RemoveListener(_a0 string, _a1 EventListener) {
	_m.Called(_a0, _a1)
}

// MockConn_RemoveListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveListener'
type MockConn_RemoveListener_Call struct {
	*mock.Call
}

// RemoveListener is a helper method to define mock.On call
//   - _a0 string
//   - _a1 EventListener
func (_e *MockConn_Expecter) RemoveListener(_a0 interface{}, _a1 interface{}) *MockConn_RemoveListener_Call {
	return &MockConn_RemoveListener_Call{Call: _e.mock.On("RemoveListener", _a0, _a1)}
}

func (_c *MockConn_RemoveListener_Call) Run(run func(_a0 string, _a1 EventListener)) *MockConn_RemoveListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(EventListener))
	})
	return _c
}

func (_c *MockConn_RemoveListener_Call) Return() *MockConn_RemoveListener_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_RemoveListener_Call) RunAndReturn(run func(string, EventListener)) *MockConn_RemoveListener_Call {
	_c.Call.Return(run)
	return _c
}

// RequestEncoding provides a mock function with given fields: _a0
func (_m *MockConn) RequestEncoding(_a0 encoding.Encoding) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RequestEncoding")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(encoding.Encoding) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConn_RequestEncoding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestEncoding'
type MockConn_RequestEncoding_Call struct {
	*mock.Call
}

// RequestEncoding is a helper method to define mock.On call
//   - _a0 encoding.Encoding
func (_e *MockConn_Expecter) RequestEncoding(_a0 interface{}) *MockConn_RequestEncoding_Call {
	return &MockConn_RequestEncoding_Call{Call: _e.mock.On("RequestEncoding", _a0)}
}

func (_c *MockConn_RequestEncoding_Call) Run(run func(_a0 encoding.Encoding)) *MockConn_RequestEncoding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(encoding.Encoding))
	})
	return _c
}

func (_c *MockConn_RequestEncoding_Call) Return(_a0 error) *MockConn_RequestEncoding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConn_RequestEncoding_Call) RunAndReturn(run func(encoding.Encoding) error) *MockConn_RequestEncoding_Call {
	_c.Call.Return(run)
	return _c
}

// Role provides a mock function with given fields:
func (_m *MockConn) Role() ConnRole {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Role")
	}

	var r0 ConnRole
	if rf, ok := ret.Get(0).(func() ConnRole); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ConnRole)
	}

	return r0
}

// MockConn_Role_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Role'
type MockConn_Role_Call struct {
	*mock.Call
}

// Role is a helper method to define mock.On call
func (_e *MockConn_Expecter) Role() *MockConn_Role_Call {
	return &MockConn_Role_Call{Call: _e.mock.On("Role")}
}

func (_c *MockConn_Role_Call) Run(run func()) *MockConn_Role_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConn_Role_Call) Return(_a0 ConnRole) *MockConn_Role_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConn_Role_Call) RunAndReturn(run func() ConnRole) *MockConn_Role_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: p
func (_m *MockConn) Send(p []byte) (int, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConn_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockConn_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - p []byte
func (_e *MockConn_Expecter) Send(p interface{}) *MockConn_Send_Call {
	return &MockConn_Send_Call{Call: _e.mock.On("Send", p)}
}

func (_c *MockConn_Send_Call) Run(run func(p []byte)) *MockConn_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockConn_Send_Call) Return(n int, err error) *MockConn_Send_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockConn_Send_Call) RunAndReturn(run func([]byte) (int, error)) *MockConn_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SetDeadline provides a mock function with given fields: t
func (_m *MockConn) SetDeadline(t time.Time) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConn_SetDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDeadline'
type MockConn_SetDeadline_Call struct {
	*mock.Call
}

// SetDeadline is a helper method to define mock.On call
//   - t time.Time
func (_e *MockConn_Expecter) SetDeadline(t interface{}) *MockConn_SetDeadline_Call {
	return &MockConn_SetDeadline_Call{Call: _e.mock.On("SetDeadline", t)}
}

func (_c *MockConn_SetDeadline_Call) Run(run func(t time.Time)) *MockConn_SetDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockConn_SetDeadline_Call) Return(_a0 error) *MockConn_SetDeadline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConn_SetDeadline_Call) RunAndReturn(run func(time.Time) error) *MockConn_SetDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetEncoding provides a mock function with given fields: _a0
func (_m *MockConn) SetEncoding(_a0 encoding.Encoding) {
	_m.Called(_a0)
}

// MockConn_SetEncoding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEncoding'
type MockConn_SetEncoding_Call struct {
	*mock.Call
}

// SetEncoding is a helper method to define mock.On call
//   - _a0 encoding.Encoding
func (_e *MockConn_Expecter) SetEncoding(_a0 interface{}) *MockConn_SetEncoding_Call {
	return &MockConn_SetEncoding_Call{Call: _e.mock.On("SetEncoding", _a0)}
}

func (_c *MockConn_SetEncoding_Call) Run(run func(_a0 encoding.Encoding)) *MockConn_SetEncoding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(encoding.Encoding))
	})
	return _c
}

func (_c *MockConn_SetEncoding_Call) Return() *MockConn_SetEncoding_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_SetEncoding_Call) RunAndReturn(run func(encoding.Encoding)) *MockConn_SetEncoding_Call {
	_c.Call.Return(run)
	return _c
}

// SetLogger provides a mock function with given fields: _a0
func (_m *MockConn) SetLogger(_a0 Logger) {
	_m.Called(_a0)
}

// MockConn_SetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLogger'
type MockConn_SetLogger_Call struct {
	*mock.Call
}

// SetLogger is a helper method to define mock.On call
//   - _a0 Logger
func (_e *MockConn_Expecter) SetLogger(_a0 interface{}) *MockConn_SetLogger_Call {
	return &MockConn_SetLogger_Call{Call: _e.mock.On("SetLogger", _a0)}
}

func (_c *MockConn_SetLogger_Call) Run(run func(_a0 Logger)) *MockConn_SetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Logger))
	})
	return _c
}

func (_c *MockConn_SetLogger_Call) Return() *MockConn_SetLogger_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_SetLogger_Call) RunAndReturn(run func(Logger)) *MockConn_SetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// SetReadDeadline provides a mock function with given fields: t
func (_m *MockConn) SetReadDeadline(t time.Time) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetReadDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConn_SetReadDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReadDeadline'
type MockConn_SetReadDeadline_Call struct {
	*mock.Call
}

// SetReadDeadline is a helper method to define mock.On call
//   - t time.Time
func (_e *MockConn_Expecter) SetReadDeadline(t interface{}) *MockConn_SetReadDeadline_Call {
	return &MockConn_SetReadDeadline_Call{Call: _e.mock.On("SetReadDeadline", t)}
}

func (_c *MockConn_SetReadDeadline_Call) Run(run func(t time.Time)) *MockConn_SetReadDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockConn_SetReadDeadline_Call) Return(_a0 error) *MockConn_SetReadDeadline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConn_SetReadDeadline_Call) RunAndReturn(run func(time.Time) error) *MockConn_SetReadDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetReadEncoding provides a mock function with given fields: _a0
func (_m *MockConn) SetReadEncoding(_a0 encoding.Encoding) {
	_m.Called(_a0)
}

// MockConn_SetReadEncoding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetReadEncoding'
type MockConn_SetReadEncoding_Call struct {
	*mock.Call
}

// SetReadEncoding is a helper method to define mock.On call
//   - _a0 encoding.Encoding
func (_e *MockConn_Expecter) SetReadEncoding(_a0 interface{}) *MockConn_SetReadEncoding_Call {
	return &MockConn_SetReadEncoding_Call{Call: _e.mock.On("SetReadEncoding", _a0)}
}

func (_c *MockConn_SetReadEncoding_Call) Run(run func(_a0 encoding.Encoding)) *MockConn_SetReadEncoding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(encoding.Encoding))
	})
	return _c
}

func (_c *MockConn_SetReadEncoding_Call) Return() *MockConn_SetReadEncoding_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_SetReadEncoding_Call) RunAndReturn(run func(encoding.Encoding)) *MockConn_SetReadEncoding_Call {
	_c.Call.Return(run)
	return _c
}

// SetWriteDeadline provides a mock function with given fields: t
func (_m *MockConn) SetWriteDeadline(t time.Time) error {
	ret := _m.Called(t)

	if len(ret) == 0 {
		panic("no return value specified for SetWriteDeadline")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(time.Time) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConn_SetWriteDeadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWriteDeadline'
type MockConn_SetWriteDeadline_Call struct {
	*mock.Call
}

// SetWriteDeadline is a helper method to define mock.On call
//   - t time.Time
func (_e *MockConn_Expecter) SetWriteDeadline(t interface{}) *MockConn_SetWriteDeadline_Call {
	return &MockConn_SetWriteDeadline_Call{Call: _e.mock.On("SetWriteDeadline", t)}
}

func (_c *MockConn_SetWriteDeadline_Call) Run(run func(t time.Time)) *MockConn_SetWriteDeadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockConn_SetWriteDeadline_Call) Return(_a0 error) *MockConn_SetWriteDeadline_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConn_SetWriteDeadline_Call) RunAndReturn(run func(time.Time) error) *MockConn_SetWriteDeadline_Call {
	_c.Call.Return(run)
	return _c
}

// SetWriteEncoding provides a mock function with given fields: _a0
func (_m *MockConn) SetWriteEncoding(_a0 encoding.Encoding) {
	_m.Called(_a0)
}

// MockConn_SetWriteEncoding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWriteEncoding'
type MockConn_SetWriteEncoding_Call struct {
	*mock.Call
}

// SetWriteEncoding is a helper method to define mock.On call
//   - _a0 encoding.Encoding
func (_e *MockConn_Expecter) SetWriteEncoding(_a0 interface{}) *MockConn_SetWriteEncoding_Call {
	return &MockConn_SetWriteEncoding_Call{Call: _e.mock.On("SetWriteEncoding", _a0)}
}

func (_c *MockConn_SetWriteEncoding_Call) Run(run func(_a0 encoding.Encoding)) *MockConn_SetWriteEncoding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(encoding.Encoding))
	})
	return _c
}

func (_c *MockConn_SetWriteEncoding_Call) Return() *MockConn_SetWriteEncoding_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_SetWriteEncoding_Call) RunAndReturn(run func(encoding.Encoding)) *MockConn_SetWriteEncoding_Call {
	_c.Call.Return(run)
	return _c
}

// SuppressGoAhead provides a mock function with given fields: enabled
func (_m *MockConn) SuppressGoAhead(enabled bool) {
	_m.Called(enabled)
}

// MockConn_SuppressGoAhead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SuppressGoAhead'
type MockConn_SuppressGoAhead_Call struct {
	*mock.Call
}

// SuppressGoAhead is a helper method to define mock.On call
//   - enabled bool
func (_e *MockConn_Expecter) SuppressGoAhead(enabled interface{}) *MockConn_SuppressGoAhead_Call {
	return &MockConn_SuppressGoAhead_Call{Call: _e.mock.On("SuppressGoAhead", enabled)}
}

func (_c *MockConn_SuppressGoAhead_Call) Run(run func(enabled bool)) *MockConn_SuppressGoAhead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockConn_SuppressGoAhead_Call) Return() *MockConn_SuppressGoAhead_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConn_SuppressGoAhead_Call) RunAndReturn(run func(bool)) *MockConn_SuppressGoAhead_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: b
func (_m *MockConn) Write(b []byte) (int, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConn_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockConn_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - b []byte
func (_e *MockConn_Expecter) Write(b interface{}) *MockConn_Write_Call {
	return &MockConn_Write_Call{Call: _e.mock.On("Write", b)}
}

func (_c *MockConn_Write_Call) Run(run func(b []byte)) *MockConn_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockConn_Write_Call) Return(n int, err error) *MockConn_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockConn_Write_Call) RunAndReturn(run func([]byte) (int, error)) *MockConn_Write_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConn creates a new instance of MockConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConn {
	mock := &MockConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
