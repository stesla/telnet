// Code generated by mockery v2.43.2. DO NOT EDIT.

package telnet

import mock "github.com/stretchr/testify/mock"

// MockOption is an autogenerated mock type for the Option type
type MockOption struct {
	mock.Mock
}

type MockOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOption) EXPECT() *MockOption_Expecter {
	return &MockOption_Expecter{mock: &_m.Mock}
}

// Allow provides a mock function with given fields: them, us
func (_m *MockOption) Allow(them bool, us bool) {
	_m.Called(them, us)
}

// MockOption_Allow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allow'
type MockOption_Allow_Call struct {
	*mock.Call
}

// Allow is a helper method to define mock.On call
//   - them bool
//   - us bool
func (_e *MockOption_Expecter) Allow(them interface{}, us interface{}) *MockOption_Allow_Call {
	return &MockOption_Allow_Call{Call: _e.mock.On("Allow", them, us)}
}

func (_c *MockOption_Allow_Call) Run(run func(them bool, us bool)) *MockOption_Allow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(bool))
	})
	return _c
}

func (_c *MockOption_Allow_Call) Return() *MockOption_Allow_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOption_Allow_Call) RunAndReturn(run func(bool, bool)) *MockOption_Allow_Call {
	_c.Call.Return(run)
	return _c
}

// Bind provides a mock function with given fields: _a0, _a1
func (_m *MockOption) Bind(_a0 Conn, _a1 EventSink) {
	_m.Called(_a0, _a1)
}

// MockOption_Bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bind'
type MockOption_Bind_Call struct {
	*mock.Call
}

// Bind is a helper method to define mock.On call
//   - _a0 Conn
//   - _a1 EventSink
func (_e *MockOption_Expecter) Bind(_a0 interface{}, _a1 interface{}) *MockOption_Bind_Call {
	return &MockOption_Bind_Call{Call: _e.mock.On("Bind", _a0, _a1)}
}

func (_c *MockOption_Bind_Call) Run(run func(_a0 Conn, _a1 EventSink)) *MockOption_Bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Conn), args[1].(EventSink))
	})
	return _c
}

func (_c *MockOption_Bind_Call) Return() *MockOption_Bind_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOption_Bind_Call) RunAndReturn(run func(Conn, EventSink)) *MockOption_Bind_Call {
	_c.Call.Return(run)
	return _c
}

// Byte provides a mock function with given fields:
func (_m *MockOption) Byte() byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Byte")
	}

	var r0 byte
	if rf, ok := ret.Get(0).(func() byte); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(byte)
	}

	return r0
}

// MockOption_Byte_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Byte'
type MockOption_Byte_Call struct {
	*mock.Call
}

// Byte is a helper method to define mock.On call
func (_e *MockOption_Expecter) Byte() *MockOption_Byte_Call {
	return &MockOption_Byte_Call{Call: _e.mock.On("Byte")}
}

func (_c *MockOption_Byte_Call) Run(run func()) *MockOption_Byte_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_Byte_Call) Return(_a0 byte) *MockOption_Byte_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOption_Byte_Call) RunAndReturn(run func() byte) *MockOption_Byte_Call {
	_c.Call.Return(run)
	return _c
}

// Conn provides a mock function with given fields:
func (_m *MockOption) Conn() Conn {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conn")
	}

	var r0 Conn
	if rf, ok := ret.Get(0).(func() Conn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Conn)
		}
	}

	return r0
}

// MockOption_Conn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Conn'
type MockOption_Conn_Call struct {
	*mock.Call
}

// Conn is a helper method to define mock.On call
func (_e *MockOption_Expecter) Conn() *MockOption_Conn_Call {
	return &MockOption_Conn_Call{Call: _e.mock.On("Conn")}
}

func (_c *MockOption_Conn_Call) Run(run func()) *MockOption_Conn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_Conn_Call) Return(_a0 Conn) *MockOption_Conn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOption_Conn_Call) RunAndReturn(run func() Conn) *MockOption_Conn_Call {
	_c.Call.Return(run)
	return _c
}

// EnabledForThem provides a mock function with given fields:
func (_m *MockOption) EnabledForThem() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnabledForThem")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockOption_EnabledForThem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnabledForThem'
type MockOption_EnabledForThem_Call struct {
	*mock.Call
}

// EnabledForThem is a helper method to define mock.On call
func (_e *MockOption_Expecter) EnabledForThem() *MockOption_EnabledForThem_Call {
	return &MockOption_EnabledForThem_Call{Call: _e.mock.On("EnabledForThem")}
}

func (_c *MockOption_EnabledForThem_Call) Run(run func()) *MockOption_EnabledForThem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_EnabledForThem_Call) Return(_a0 bool) *MockOption_EnabledForThem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOption_EnabledForThem_Call) RunAndReturn(run func() bool) *MockOption_EnabledForThem_Call {
	_c.Call.Return(run)
	return _c
}

// EnabledForUs provides a mock function with given fields:
func (_m *MockOption) EnabledForUs() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EnabledForUs")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockOption_EnabledForUs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnabledForUs'
type MockOption_EnabledForUs_Call struct {
	*mock.Call
}

// EnabledForUs is a helper method to define mock.On call
func (_e *MockOption_Expecter) EnabledForUs() *MockOption_EnabledForUs_Call {
	return &MockOption_EnabledForUs_Call{Call: _e.mock.On("EnabledForUs")}
}

func (_c *MockOption_EnabledForUs_Call) Run(run func()) *MockOption_EnabledForUs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_EnabledForUs_Call) Return(_a0 bool) *MockOption_EnabledForUs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOption_EnabledForUs_Call) RunAndReturn(run func() bool) *MockOption_EnabledForUs_Call {
	_c.Call.Return(run)
	return _c
}

// Sink provides a mock function with given fields:
func (_m *MockOption) Sink() EventSink {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Sink")
	}

	var r0 EventSink
	if rf, ok := ret.Get(0).(func() EventSink); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EventSink)
		}
	}

	return r0
}

// MockOption_Sink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sink'
type MockOption_Sink_Call struct {
	*mock.Call
}

// Sink is a helper method to define mock.On call
func (_e *MockOption_Expecter) Sink() *MockOption_Sink_Call {
	return &MockOption_Sink_Call{Call: _e.mock.On("Sink")}
}

func (_c *MockOption_Sink_Call) Run(run func()) *MockOption_Sink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_Sink_Call) Return(_a0 EventSink) *MockOption_Sink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOption_Sink_Call) RunAndReturn(run func() EventSink) *MockOption_Sink_Call {
	_c.Call.Return(run)
	return _c
}

// Subnegotiation provides a mock function with given fields: _a0
func (_m *MockOption) Subnegotiation(_a0 []byte) {
	_m.Called(_a0)
}

// MockOption_Subnegotiation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subnegotiation'
type MockOption_Subnegotiation_Call struct {
	*mock.Call
}

// Subnegotiation is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockOption_Expecter) Subnegotiation(_a0 interface{}) *MockOption_Subnegotiation_Call {
	return &MockOption_Subnegotiation_Call{Call: _e.mock.On("Subnegotiation", _a0)}
}

func (_c *MockOption_Subnegotiation_Call) Run(run func(_a0 []byte)) *MockOption_Subnegotiation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockOption_Subnegotiation_Call) Return() *MockOption_Subnegotiation_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockOption_Subnegotiation_Call) RunAndReturn(run func([]byte)) *MockOption_Subnegotiation_Call {
	_c.Call.Return(run)
	return _c
}

// disableThem provides a mock function with given fields:
func (_m *MockOption) disableThem() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for disableThem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOption_disableThem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'disableThem'
type MockOption_disableThem_Call struct {
	*mock.Call
}

// disableThem is a helper method to define mock.On call
func (_e *MockOption_Expecter) disableThem() *MockOption_disableThem_Call {
	return &MockOption_disableThem_Call{Call: _e.mock.On("disableThem")}
}

func (_c *MockOption_disableThem_Call) Run(run func()) *MockOption_disableThem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_disableThem_Call) Return(_a0 error) *MockOption_disableThem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOption_disableThem_Call) RunAndReturn(run func() error) *MockOption_disableThem_Call {
	_c.Call.Return(run)
	return _c
}

// disableUs provides a mock function with given fields:
func (_m *MockOption) disableUs() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for disableUs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOption_disableUs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'disableUs'
type MockOption_disableUs_Call struct {
	*mock.Call
}

// disableUs is a helper method to define mock.On call
func (_e *MockOption_Expecter) disableUs() *MockOption_disableUs_Call {
	return &MockOption_disableUs_Call{Call: _e.mock.On("disableUs")}
}

func (_c *MockOption_disableUs_Call) Run(run func()) *MockOption_disableUs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_disableUs_Call) Return(_a0 error) *MockOption_disableUs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOption_disableUs_Call) RunAndReturn(run func() error) *MockOption_disableUs_Call {
	_c.Call.Return(run)
	return _c
}

// enableThem provides a mock function with given fields:
func (_m *MockOption) enableThem() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for enableThem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOption_enableThem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'enableThem'
type MockOption_enableThem_Call struct {
	*mock.Call
}

// enableThem is a helper method to define mock.On call
func (_e *MockOption_Expecter) enableThem() *MockOption_enableThem_Call {
	return &MockOption_enableThem_Call{Call: _e.mock.On("enableThem")}
}

func (_c *MockOption_enableThem_Call) Run(run func()) *MockOption_enableThem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_enableThem_Call) Return(_a0 error) *MockOption_enableThem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOption_enableThem_Call) RunAndReturn(run func() error) *MockOption_enableThem_Call {
	_c.Call.Return(run)
	return _c
}

// enableUs provides a mock function with given fields:
func (_m *MockOption) enableUs() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for enableUs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOption_enableUs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'enableUs'
type MockOption_enableUs_Call struct {
	*mock.Call
}

// enableUs is a helper method to define mock.On call
func (_e *MockOption_Expecter) enableUs() *MockOption_enableUs_Call {
	return &MockOption_enableUs_Call{Call: _e.mock.On("enableUs")}
}

func (_c *MockOption_enableUs_Call) Run(run func()) *MockOption_enableUs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOption_enableUs_Call) Return(_a0 error) *MockOption_enableUs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOption_enableUs_Call) RunAndReturn(run func() error) *MockOption_enableUs_Call {
	_c.Call.Return(run)
	return _c
}

// receive provides a mock function with given fields: c
func (_m *MockOption) receive(c byte) error {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for receive")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(byte) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOption_receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'receive'
type MockOption_receive_Call struct {
	*mock.Call
}

// receive is a helper method to define mock.On call
//   - c byte
func (_e *MockOption_Expecter) receive(c interface{}) *MockOption_receive_Call {
	return &MockOption_receive_Call{Call: _e.mock.On("receive", c)}
}

func (_c *MockOption_receive_Call) Run(run func(c byte)) *MockOption_receive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(byte))
	})
	return _c
}

func (_c *MockOption_receive_Call) Return(_a0 error) *MockOption_receive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOption_receive_Call) RunAndReturn(run func(byte) error) *MockOption_receive_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOption creates a new instance of MockOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOption {
	mock := &MockOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
